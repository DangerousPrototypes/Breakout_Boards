<project name="Java API for Future Technology Devices International Ltd. FTD2xx dvices." default="init-project" basedir=".">

	<!-- create property holding environment variables -->
	<property environment="env" />

	<property name="company" value="Mike Werner" />

	<property name="project.name" value="${ant.project.name}" />

	<property name="src" value="src" description="Specifies the base source directory." />

	<property name="src.application" value="${src}/application" description="Specifies the application source directory." />

	<property name="target" value="target" description="Specifies the target directory." />

	<property name="target.application" value="${target}/application" description="Specifies the application target directory." />

	<property name="target.application.bin" value="${target.application}/bin" description="Specifies the application classes directory." />

	<property name="target.application.docs" value="${target.application}/docs" description="Specifies the application docs directory." />

	<property name="target.dist" value="${target}/dist" description="Specifies the distribution directory." />

	<property name="target.dist.include" value="${target.dist}/include" description="Specifies the include directory to place generated header files in." />

	<property name="target.dist.lib" value="${target.dist}/lib" description="Specifies the lib directory to place external libraries in." />

	<property name="config-file" value="ftd2xxj.properties" description="The properties file to configure the library." />

	<property name="lib" value="lib" description="Specifies the directory with external dependencies like jar-files." />

	<property name="images" value="images" description="Specifies the images directory." />

	<property name="resourceBundles" value="resourceBundles" description="Specifies the ResourceBundles directory." />

	<property name="version" value="2.1" description="Specifies the current project version" />

	<property name="application-prefix" value="ftd2xxj" description="Specifies the prefix of the application. This will be used e.g. for jar-file naming." />

	<property name="application-jar" value="${application-prefix}-${version}.jar" description="Specifies the name and location of the application's main jar-file." />
	<property name="application-doc-zip" value="${application-prefix}-${version}-doc.zip" description="Specifies the name and location of the application's main jar-file." />

	<property name="project-source-zip" value="${application-prefix}-${version}-src.zip" description="Specifies the name and location of the application's source zip-file." />
	<property name="project-application-zip" value="${application-prefix}-${version}.zip" description="Specifies the name and location of the application's zip-file." />


	<property name="main-class" value="com.ftdichip.ftd2xx.ui.Main" />

	<property name="PROJECT_HOME_PAGE" value="http://sourceforge.net/projects/ftd2xxj/docs/api" />



	<!-- Build the CLASSPATH -->
	<path id="project.classpath">
		<!-- Add 3rd-party jars -->

		<fileset dir=".">
			<include name="${lib}/**/*.jar" />
		</fileset>

		<!-- inlude generated jars -->
		<fileset dir=".">
			<include name="${target.dist}/**/${application-prefix}*.jar" />
		</fileset>
	</path>

	<!-- make classpath available via property -->
	<property name="project.classpath" refid="project.classpath" />

	<target name="init-project" description="Creates the projects directory structure">

		<mkdir dir="${src}" />
		<mkdir dir="${src.application}" />
		<mkdir dir="${target}" />
		<mkdir dir="${target.application}" />
		<mkdir dir="${target.application.bin}" />
		<mkdir dir="${target.application.docs}" />
		<mkdir dir="${target.dist}" />
		<mkdir dir="${target.dist.include}" />
		<mkdir dir="${lib}" />
		<mkdir dir="${images}" />
		<mkdir dir="${resourceBundles}" />
	</target>

	<target name="init" description="Initializes some time and date properties and prints out configuration data like the used JDK">
		<!-- Create the time stamp -->
		<tstamp>
			<format property="date" pattern="dd-MMMM-yyyy" locale="en" />
			<format property="time" pattern="HH:mm:ss" locale="en" />
			<format property="year" pattern="yyyy" locale="en" />
		</tstamp>

		<!-- print configuration info -->
		<echo level="info">Start time: ${date} : ${time}</echo>
		<echo level="info">Used JDK: ${java.home}</echo>
		<echo level="info">!!! Be sure to use a Java SDK !!!</echo>
		<echo level="info">Project classpath: ${project.classpath}</echo>
	</target>

	<target name="build-all" description="Builds all application and test classes, theire docs and deploys them to theire appropriate jars">
		<antcall target="build-application" inheritrefs="true" />
		<antcall target="zip-project-source" inheritrefs="true" />		
	</target>

	<target name="build-application" description="Builds the entire application">
		<antcall target="compile-application-release" inheritrefs="true" />
		<antcall target="jar-application" inheritrefs="true" />
		<antcall target="dist-external-files" inheritrefs="true" />
		<antcall target="build-application-docs" inheritrefs="true" />
		<antcall target="zip-application-docs" inheritrefs="true" />
		<antcall target="generate-jni" inheritrefs="true" />
		<antcall target="build-resource-bundles" inheritrefs="true" />
		<antcall target="zip-application" inheritrefs="true" />
	</target>

	<target name="build-application-docs">
		<antcall target="clean-application-docs" inheritrefs="true" />
		<antcall target="javadoc-application" inheritrefs="true" />
	</target>

	<target name="build-resource-bundles" description="Builds all resource bundles and deploys them">
		<!-- Build default resource bundle -->
		<antcall target="build-resource-bundle" inheritall="true">
			<param name="locale" value="" />
		</antcall>

		<!-- Build de_DE resource bundle -->
		<antcall target="build-resource-bundle" inheritall="true">
			<param name="locale" value="_de" />
		</antcall>
	</target>

	<!-- Creates the applications resource bundles. This task shall be      -->
	<!-- called using the parameter locale in order to decide wich resource -->
	<!-- bundle to build                                                    -->
	<target name="build-resource-bundle" depends="init">

		<echo>Build resource bundle for locale ${locale}</echo>

		<antcall target="clean-resource-bundle" inheritall="true">
			<param name="locale" value="${locale}" />
		</antcall>


		<jar jarfile="${target.dist}/${application-prefix}-${version}-resources${locale}.jar" index="true">
			<manifest>
				<attribute name="Specification-Title" value="${project.name}" />
				<attribute name="Specification-Version" value="${version}" />
				<attribute name="Specification-Vendor" value="${company}" />
				<attribute name="Implementation-Title" value="${project.name} - Resource Bundle for local ${locale}" />
				<attribute name="Implementation-Version" value="${version} ${date}" />
				<attribute name="Implementation-Vendor" value="${company}" />
			</manifest>

			<fileset dir="${resourceBundles}/${application-prefix}${locale}" />
		</jar>
	</target>

	<!-- Cleans all generated files -->
	<target name="clean-all">
		<antcall target="clean-application" inheritrefs="true" />
		<antcall target="clean-jni" inheritrefs="true" />
	</target>

	<target name="clean-application" description="Cleans the application classes and jars">
		<antcall target="clean-application-docs" inheritrefs="true" />

		<delete includeEmptyDirs="true">
			<fileset dir=".">
				<include name="${target.application.bin}/**/*" />
				<include name="${target.dist}/${application-prefix}*" />
				<include name="${target.dist.lib}/**/*" />
			</fileset>
		</delete>
	</target>

	<!-- Cleans the application's resource bundles -->
	<target name="clean-resource-bundle">
		<delete includeEmptyDirs="true">
			<fileset dir=".">
				<include name="${target.dist}/${application-name}*-resources${locale}.jar" />
			</fileset>
		</delete>
	</target>

	<target name="clean-jni" description="Cleans the generated jni header files.">

		<delete includeEmptyDirs="true">
			<fileset dir=".">
				<include name="${target.dist.include}/*" />
			</fileset>
		</delete>
	</target>

	<!-- Cleans the application's docs -->
	<target name="clean-application-docs">
		<delete includeEmptyDirs="true">
			<fileset dir=".">
				<include name="${target.application.docs}/**/*" />
				<include name="${target.dist}/${application-doc-zip}" />
			</fileset>
		</delete>
	</target>

	<!-- Compiles the application sources without debug information -->
	<target name="compile-application-release" depends="init">

		<antcall target="clean-application" inheritrefs="true" />

		<javac srcdir="${src.application}" destdir="${target.application.bin}" debug="off">
			<classpath refid="project.classpath" />
		</javac>
	</target>

	<!-- Creates the application's jars -->
	<target name="jar-application" depends="init">
		<jar jarfile="${target.dist}/${application-jar}" index="true">
			<manifest>
				<attribute name="Specification-Title" value="${project.name}" />
				<attribute name="Specification-Version" value="${version}" />
				<attribute name="Specification-Vendor" value="${company}" />
				<attribute name="Implementation-Title" value="${project.name}" />
				<attribute name="Implementation-Version" value="${version} ${date}" />
				<attribute name="Implementation-Vendor" value="${company}" />
				<attribute name="Main-Class" value="${main-class}" />
			</manifest>

			<fileset dir="${target.application.bin}" />
			<fileset dir="${resourceBundles}/${application-prefix}" />
			<fileset dir="${resourceBundles}/${application-prefix}_de" />
			<fileset dir="${images}" />
			<fileset file="${config-file}" />
		</jar>
	</target>

	<!-- Copies the libraries needed to run the application and tests to the dist directory -->
	<target name="dist-external-libraries">
		<copy overwrite="true" todir="${target.dist}">
			<fileset dir=".">
				<include name="${lib}/**/*" />
			</fileset>
		</copy>
	</target>

	<!-- Copies all external files needed to run the application and tests to the dist directory -->
	<target name="dist-external-files">
		<antcall target="dist-external-libraries" inheritrefs="true" />
		
		<copy overwrite="true" todir="${target.dist}">
			<fileset dir=".">
				<include name="${application-prefix}*" />
			</fileset>
		</copy>

		<antcall target="update-application-version-in-files" inheritrefs="true" />
		<chmod file="${target.dist}/${application-prefix}" perm="a+x" />		
	</target>



	<!-- Updates the version strings within all files -->
	<target name="update-application-version-in-files">
		<antcall target="update-version-in-file" inheritall="true">
			<param name="file" value="${application-prefix}" />
			<param name="prefix" value="${application-prefix}-" />
			<param name="suffix" value=".jar" />
		</antcall>
		<antcall target="update-version-in-file" inheritall="true">
			<param name="file" value="${application-prefix}.bat" />
			<param name="prefix" value="${application-prefix}-" />
			<param name="suffix" value=".jar" />
		</antcall>
	</target>



	<!-- Updates the version string within a particular file -->
	<target name="update-version-in-file">
		<echo>Update version in file ${file}</echo>

		<replaceregexp file="${target.dist}/${file}" match="${prefix}\d.\d${suffix}" replace="${prefix}${version}${suffix}" byline="true" />
	</target>



	<target name="javadoc-application" depends="init" description="Generates the application's API documentation">
		<javadoc destdir="${target.application.docs}" access="protected" source="1.5" use="true" notree="false" nonavbar="false" noindex="false" splitindex="true" author="true" version="true" nodeprecatedlist="false" nodeprecated="false" packagenames="*" sourcepath="${src.application}" classpathref="project.classpath" useexternalfile="yes">

			<doctitle>
				<![CDATA[
	    	      	<h3>${project.name}</h3>
                ]]>
            </doctitle>

		<link offline="true" href="http://java.sun.com/j2se/1.5.0/docs/api" packagelistLoc="${java.home}/docs/api" />
	</javadoc>

	<!-- copy linked images -->
	<copy toDir="${target.application.docs}/resources">
		<fileset dir="${images}">
			<include name="logo.gif" />
		</fileset>
	</copy>
</target>

<!-- Packages all application docs into a single zip-file prefixed with docs -->
<target name="zip-application-docs">
	<zip destfile="${target.dist}/${application-doc-zip}">
		<zipfileset prefix="docs" dir="${target.application.docs}" />
	</zip>
</target>

<target name="generate-jni" description="Generates all JNI header files.">
	<javah class="com.ftdichip.ftd2xx.Service" classpathref="project.classpath" destdir="${target.dist.include}" />
	<javah class="com.ftdichip.ftd2xx.Device" classpathref="project.classpath" destdir="${target.dist.include}" />
	<javah class="com.ftdichip.ftd2xx.EEPROM" classpathref="project.classpath" destdir="${target.dist.include}" />
	<javah class="com.ftdichip.ftd2xx.Port" classpathref="project.classpath" destdir="${target.dist.include}" />
</target>

<!-- Packages the entire project source files into a single zip-file -->
<target name="zip-project-source">
	<zip destfile="${target.dist}/${project-source-zip}">
		<fileset dir=".">
			<include name="*.*" />
			<exclude name="*.log" />
		</fileset>

		<zipfileset dir="${src}" prefix="${src}" />
		<zipfileset dir="${images}" prefix="${images}" />
		<zipfileset dir="${resourceBundles}" prefix="${resourceBundles}" />
		<zipfileset dir="${lib}" prefix="${lib}" />
	</zip>
</target>

<!-- Packages the application distributables into a single zip-file -->
<target name="zip-application">
	<zip destfile="${target.dist}/${project-application-zip}">
		<fileset dir="${target.dist}">
			<include name="${application-jar}" />
			<include name="${application-prefix}" />
			<include name="${application-prefix}.bat" />
		</fileset>

		<zipfileset dir="${target.dist}/${lib}" prefix="${lib}" />
	</zip>
</target>
</project>